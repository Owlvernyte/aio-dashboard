/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'

/* Instruments */
// import { incrementAsync } from './thunks'

const initialState: SidebarSliceState = {
    value: true,
    status: 'idle',
}

export const sidebarSlice = createSlice({
    name: 'sidebar',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        toggle: (state) => {
            state.value = !state.value
        },
        toggleOn: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.value = true
        },
        toggleOff: (state) => {
            state.value = false
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        toggleByBool: (state, action: PayloadAction<boolean>) => {
            state.value = action.payload
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //     builder
    //         .addCase(incrementAsync.pending, (state) => {
    //             state.status = 'loading'
    //         })
    //         .addCase(incrementAsync.fulfilled, (state, action) => {
    //             state.status = 'idle'
    //             state.value += action.payload
    //         })
    // },
})

/* Types */
export interface SidebarSliceState {
    value: boolean
    status: 'idle' | 'loading' | 'failed'
}
